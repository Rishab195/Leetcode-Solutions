124. Binary Tree Maximum Path Sum
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.
Example 1:

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
        SOLUTION
    __________________
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //    private int maximum=Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        int[]maxi=new int[1];
        maxi[0]=Integer.MIN_VALUE;
        MaxSumDown(root,maxi);
        return maxi[0];
        
    }
    public int MaxSumDown(TreeNode root,int maxi[]){
        if(root==null){
            return 0;
        }
       int leftSum=Math.max(0,MaxSumDown(root.left,maxi));
       int  rightSum=Math.max(0,MaxSumDown(root.right,maxi));
        maxi[0]=Math.max(maxi[0],leftSum+rightSum+root.val);
        return Math.max(leftSum,rightSum)+root.val;
    }
}
