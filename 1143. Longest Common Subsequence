1143. Longest Common Subsequence
Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.
Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
      Solution
___________________________
class Solution {
    public int solve(String text1, String text2, int i, int j, int[][] dp) {
        // Base cases
        if (i == text1.length() || j == text2.length()) {
            return 0;
        }
        
        // If the result is already computed
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        
        int ans;
        // When characters match
        if (text1.charAt(i) == text2.charAt(j)) {
            ans = 1 + solve(text1, text2, i + 1, j + 1, dp);
        } else {
            // When characters don't match
            ans = Math.max(solve(text1, text2, i + 1, j, dp), solve(text1, text2, i, j + 1, dp));
        }
        
        // Store the result in dp array
        dp[i][j] = ans;
        
        return dp[i][j];
    }

    public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp = new int[text1.length()][text2.length()];
        
        // Initialize dp array with -1 using Arrays.fill in a loop
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        
        return solve(text1, text2, 0, 0, dp);
    }
}
