19. Remove Nth Node From End of List
Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

Example 1:

Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]
 
Constraints:

The number of nodes in the list is in the range [0, 100].
0 <= Node.val <= 100

                SOLUTION
_____________________________________________
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp=head;
        int length=length(temp);
        int len=length-n;
        if(len==0){
            return head.next;
        }
        for(int i=0;i<len-1;i++)
        {
            temp=temp.next;
        }
        temp.next=temp.next.next;
        return head;
        
        
    }
    public int length(ListNode head)
    {
        int length=0;
        while (head!=null){
            length++;
            head=head.next;
        }
        return length;
    }
}
